buildscript {
    ext {
        springBootVersion = "2.1.3.RELEASE"
        springCloudVersion = "Finchley.RELEASE"
        springCloudAliVersion = "0.2.1.RELEASE"
    }
    repositories {
        mavenLocal()
        maven { url "http://maven.aliyun.com/nexus/content/groups/public" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

group = 'com.spring'
version = '0.0.1-SNAPSHOT'
description = "spring-boot"

configure(allprojects.findAll { it.subprojects.empty }) {
    //Java
    apply plugin: 'java'

    //IDE
    apply plugin: 'idea'
    apply plugin: 'eclipse'

    sourceCompatibility = 11
    targetCompatibility = 11

    repositories {
        mavenLocal()
        maven { url "http://maven.aliyun.com/nexus/content/groups/public" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
        jcenter()
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    test {
        exclude '**/*'
    }

    ext {
        lombokVersion = "1.18.4"

        guavaVersion = "27.0.1-jre"

        modelmapperVersion = "1.1.2"
        orikaVersion = "1.5.4"

        fastJosnVersion = "1.2.56"

        commonsIoVersion = "2.6"
        commonsCodecVersion = "1.11"
        commonsLang3Version = "3.8.1"
        commonsBeanutilsVersion = "1.9.3"
        commonsCollectionsVersion = "3.2.2"

        junitVersion = "4.12"
    }

    dependencies {
        // Lombok
        compileOnly ("org.projectlombok:lombok:${lombokVersion}")
        annotationProcessor ("org.projectlombok:lombok:${lombokVersion}")

        // Google Guava
        implementation("com.google.guava:guava:${guavaVersion}")

        // ModelMapper
        implementation("org.modelmapper:modelmapper:${modelmapperVersion}")
        // Orika
        implementation("ma.glasnost.orika:orika-core:${orikaVersion}")

        //FastJSON
        implementation("com.alibaba:fastjson:${fastJosnVersion}")

        // Commons
        implementation("commons-io:commons-io:${commonsIoVersion}")
        implementation("commons-codec:commons-codec:${commonsCodecVersion}")
        implementation("org.apache.commons:commons-lang3:${commonsLang3Version}")
        implementation("commons-beanutils:commons-beanutils:${commonsBeanutilsVersion}")
        implementation("commons-collections:commons-collections:${commonsCollectionsVersion}")

        //Junit
        testImplementation("junit:junit:${junitVersion}")
    }
}

configure(subprojects.findAll {
    it.subprojects.empty && it.name.endsWith('-service')
}) {
    //Spring Boot
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
            mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
            mavenBom("org.springframework.cloud:spring-cloud-alibaba-dependencies:${springCloudAliVersion}")
        }
    }

    ext {
        rocketMqVersion = "4.4.0"

        mysqlVersion = "8.0.15"

        druidVersion = "1.1.14"

        hibernateVersion = "5.4.0.Final"

        mybatisVersion = "3.4.6"
        mybatisSpringVersion = "1.3.2"
        pagehelperVersion = "5.1.8"
    }

    dependencies {
        // Spring Boot
        implementation("org.springframework.boot:spring-boot-starter:${springBootVersion}")
        // Spring AOP
        implementation("org.springframework.boot:spring-boot-starter-aop:${springBootVersion}")

        // Spring Data JPA
        implementation("org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}")
        // Spring JDBC
        implementation("org.springframework.boot:spring-boot-starter-data-jdbc:${springBootVersion}")

        // Spring AMQP
        implementation("org.springframework.boot:spring-boot-starter-amqp:${springBootVersion}")
        // Spring Redis
        implementation("org.springframework.boot:spring-boot-starter-data-redis:${springBootVersion}")

        // Spring Actuator
        implementation("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}")

        // Spring Security
        implementation("org.springframework.boot:spring-boot-starter-security:${springBootVersion}")

        // Spring WebFlux
        implementation("org.springframework.boot:spring-boot-starter-webflux:${springBootVersion}")
        // Spring WebSocket
        implementation("org.springframework.boot:spring-boot-starter-websocket:${springBootVersion}")

        //Spring REST Jersey
        implementation("org.springframework.boot:spring-boot-starter-jersey:${springBootVersion}")
        // Spring Annotation-Validation
        implementation("org.springframework.boot:spring-boot-starter-validation:${springBootVersion}")
        // Spring JSON
        implementation("org.springframework.boot:spring-boot-starter-json:${springBootVersion}")
        // Spring Quartz
        implementation("org.springframework.boot:spring-boot-starter-quartz:${springBootVersion}")
        // Spring Mail
        implementation("org.springframework.boot:spring-boot-starter-mail:${springBootVersion}")

        // MySQL
        implementation("mysql:mysql-connector-java:${mysqlVersion}")
        // Druid
        implementation("com.alibaba:druid:${druidVersion}")

        // Hibernate
        implementation("org.hibernate:hibernate-core:${hibernateVersion}")
        //implementation("com.github.hibernate-redis:hibernate-redis:${hibernateRedisVersion}")

        // MyBatis
        implementation("org.mybatis:mybatis:${mybatisVersion}")
        implementation("org.mybatis:mybatis-spring:${mybatisSpringVersion}")
        implementation("com.github.pagehelper:pagehelper:${pagehelperVersion}")

        // Spring Devtools
        runtime("org.springframework.boot:spring-boot-devtools:${springBootVersion}")

        // Spring Test
        testImplementation("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")

        //NoSQL
        //implementation("org.springframework.boot:spring-boot-starter-data-mongodb:${springBootVersion}")
        //implementation("org.springframework.boot:spring-boot-starter-data-solr:${springBootVersion}")

        // OAuth2
        //implementation("org.springframework.boot:spring-boot-starter-oauth2-client:${springBootVersion}")
        //implementation("org.springframework.boot:spring-boot-starter-oauth2-resource-server:${springBootVersion}")

        //Logback 默认日志启动器
        //implementation("org.springframework.boot:spring-boot-starter-logging:${springBootVersion}")
        //使用Log4j2进行日志记录,替代spring-boot-starter-logging
        //implementation("org.springframework.boot:spring-boot-starter-log4j2:${springBootVersion}")
        //implementation("org.springframework.boot:spring-boot-starter-reactor-netty:${springBootVersion}")
        //implementation("org.springframework.boot:spring-boot-starter-jetty:${springBootVersion}")
        //implementation("org.springframework.boot:spring-boot-starter-tomcat:${springBootVersion}")

        // Spring-Cloud-Connectors
        //implementation("org.springframework.boot:spring-boot-starter-cloud-connectors:${springBootVersion}")

        //Other
        //implementation("org.springframework.boot:spring-boot-starter-batch:${springBootVersion}")
        //implementation("org.springframework.boot:spring-boot-starter-cache:${springBootVersion}")
        //implementation("org.springframework.boot:spring-boot-starter-groovy-templates:${springBootVersion}")
        //implementation("org.springframework.boot:spring-boot-starter-web-services:${springBootVersion}")
    }
}


configure(subprojects.findAll {
    it.subprojects.empty && it.name.endsWith('-web')
}) {
    //Spring Boot
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    //Node
    /*apply plugin: "com.moowork.node"*/

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
            mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
            mavenBom("org.springframework.cloud:spring-cloud-alibaba-dependencies:${springCloudAliVersion}")
        }
    }

    ext {}

    dependencies {
        // Spring Boot
        implementation("org.springframework.boot:spring-boot-starter:${springBootVersion}")
        // Spring MVC
        implementation("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")

        // Spring Redis
        implementation("org.springframework.boot:spring-boot-starter-data-redis:${springBootVersion}")

        // Spring Actuator
        implementation("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}")

        // Spring Security
        implementation("org.springframework.boot:spring-boot-starter-security:${springBootVersion}")

        // Spring WebFlux
        implementation("org.springframework.boot:spring-boot-starter-webflux:${springBootVersion}")
        // Spring WebSocket
        implementation("org.springframework.boot:spring-boot-starter-websocket:${springBootVersion}")

        //Spring REST Jersey
        implementation("org.springframework.boot:spring-boot-starter-jersey:${springBootVersion}")
        // Spring Annotation-Validation
        implementation("org.springframework.boot:spring-boot-starter-validation:${springBootVersion}")
        // Spring JSON
        implementation("org.springframework.boot:spring-boot-starter-json:${springBootVersion}")
        // Spring Quartz
        implementation("org.springframework.boot:spring-boot-starter-quartz:${springBootVersion}")
        // Spring Mail
        implementation("org.springframework.boot:spring-boot-starter-mail:${springBootVersion}")

        // Spring Freemarker
        implementation("org.springframework.boot:spring-boot-starter-freemarker:${springBootVersion}")
        // Spring Thymeleaf
        implementation("org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}")

        // Spring Devtools
        runtime("org.springframework.boot:spring-boot-devtools:${springBootVersion}")

        // Spring Test
        testImplementation("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
    }
}

configure(subprojects.findAll {
    it.subprojects.empty && (it.name.startsWith('platform-'))
}) {

    ext {}

    dependencies {
        // Spring Boot
        implementation("org.springframework.boot:spring-boot-starter:${springBootVersion}")
        // Spring AOP
        implementation("org.springframework.boot:spring-boot-starter-aop:${springBootVersion}")
        // Spring AMQP
        implementation("org.springframework.boot:spring-boot-starter-amqp:${springBootVersion}")
        // Spring Data JPA
        implementation("org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}")
        // Spring JDBC
        implementation("org.springframework.boot:spring-boot-starter-data-jdbc:${springBootVersion}")
        // Spring Redis
        implementation("org.springframework.boot:spring-boot-starter-data-redis:${springBootVersion}")

        // Spring Validation
        implementation("org.springframework.boot:spring-boot-starter-validation:${springBootVersion}")

        // Spring Devtools
        runtime("org.springframework.boot:spring-boot-devtools:${springBootVersion}")

        // Spring Test
        testImplementation("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
    }

}

configure(subprojects.findAll {
    it.subprojects.empty && (it.name.endsWith('-api'))
}) {

    ext {}

    dependencies {
        // Spring Boot
        implementation("org.springframework.boot:spring-boot-starter:${springBootVersion}")
        //Spring REST Jersey
        implementation("org.springframework.boot:spring-boot-starter-jersey:${springBootVersion}")

        // Spring Devtools
        runtime("org.springframework.boot:spring-boot-devtools:${springBootVersion}")
    }

}
