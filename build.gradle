buildscript {
    ext {
        springBootVersion = '2.1.1.RELEASE'
        kotlinVersion = '1.3.11'
        nodeVersion = '1.2.0'
    }
    repositories {
        mavenLocal()
        maven{ url 'http://maven.aliyun.com/nexus/content/groups/public'}
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}")
        classpath("com.moowork.gradle:gradle-node-plugin:${nodeVersion}")
    }
}

allprojects {
    //Java
    apply plugin: 'java'
    apply plugin: 'war'
    //Kotlin
    apply plugin: 'kotlin'
    apply plugin: 'kotlin-spring'
    apply plugin: 'kotlin-jpa'
    //IDE
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    //Spring Boot
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    //Node
    apply plugin: "com.moowork.node"

    group = 'com.spring'
    version = '0.0.1-SNAPSHOT'

    description = """spring-boot"""

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    node {
        version = '8.12.0'
        npmVersion = '6.5.0'
        download = true
    }

    compileKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = "1.8"
        }
    }

    compileTestKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = "1.8"
        }
    }

    repositories {
        mavenLocal()
        maven{ url 'http://maven.aliyun.com/nexus/content/groups/public'}
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
        jcenter()
    }

    dependencyManagement {
        imports { mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}") }
    }

    test {
        useJUnitPlatform()
    }

    dependencies {
        compile("org.springframework.boot:spring-boot-starter")
        compile("org.springframework.boot:spring-boot-starter-web")
        compile("org.springframework.boot:spring-boot-starter-data-jpa")
        compile("org.springframework.boot:spring-boot-starter-freemarker")
        compile("org.springframework.boot:spring-boot-starter-security")
        //compile("org.springframework.boot:spring-boot-starter-session")

        compile("org.springframework.boot:spring-boot-starter-mustache")

        /** Kotlin */
        //Java 8 variant of Kotlin standard library
        compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
        //Kotlin reflection library (mandatory as of Spring Framework 5)
        compile("org.jetbrains.kotlin:kotlin-reflect")
        //adds support for serialization/deserialization of Kotlin classes and data classes
        compile("com.fasterxml.jackson.module:jackson-module-kotlin")

        compile("com.h2database:h2:1.4.196")

        compile("org.modelmapper:modelmapper:1.1.2")

        compile("com.google.guava:guava:25.0-jre")

        compile("org.apache.commons:commons-lang3:3.8.1")
        compile("commons-collections:commons-collections:3.2.2")
        compile("commons-io:commons-io:2.6")

        runtime("org.springframework.boot:spring-boot-devtools")

        testCompile("org.springframework.boot:spring-boot-starter-test") {
            exclude(module: "junit")
            exclude(module: "commons-logging")
        }
        testCompile("junit:junit:4.12")
        testCompile("org.junit.jupiter:junit-jupiter-api")
        testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
    }

    task npmBuild(type: NpmTask, dependsOn: 'npmInstall') {
        group = 'node'
        args = ['run', 'build']
    }

    task npmDev(type: NpmTask, dependsOn: npmInstall) {
        group = 'node'
        args = ['run', 'dev']
    }

    task webpack(type: NodeTask, dependsOn: 'npmInstall') {
        def osName = System.getProperty("os.name").toLowerCase();
        if (osName.contains("windows")) {
            script = project.file('node_modules/webpack/bin/webpack.js')
        } else {
            script = project.file('node_modules/.bin/webpack')
        }
    }

    processResources.dependsOn 'webpack'
    clean.delete << file('node_modules')
}
