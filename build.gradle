buildscript {
    ext {
        springBootVersion = '2.1.1.RELEASE'
        springCloudVersion = 'Finchley.SR1'
        springCloudAliVersion = '0.2.1.RELEASE'
        kotlinVersion = '1.3.11'
    }
    repositories {
        mavenLocal()
        maven { url "http://maven.aliyun.com/nexus/content/groups/public" }
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}")
    }
}

allprojects {
    //Java
    apply plugin: 'java'
    apply plugin: 'war'
    //Kotlin
    apply plugin: 'kotlin'
    apply plugin: 'kotlin-spring'
    apply plugin: 'kotlin-jpa'
    //IDE
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    //Spring Boot
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    //Node
    /*apply plugin: "com.moowork.node"*/

    group = 'com.spring'
    version = '0.0.1-SNAPSHOT'

    description = "spring-boot"

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    /*node {
        version = '8.12.0'
        npmVersion = '6.5.0'
        download = true
    }*/

    compileKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = "1.8"
        }
    }

    compileTestKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = "1.8"
        }
    }

    repositories {
        mavenLocal()
        maven { url "http://maven.aliyun.com/nexus/content/groups/public" }
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
        jcenter()
    }

    dependencyManagement {
        imports { mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}") }
        imports { mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}") }
        imports { mavenBom("org.springframework.cloud:spring-cloud-alibaba-dependencies:${springCloudAliVersion}") }
    }

    test {
        useJUnitPlatform()
    }

    ext {
        junitVersion = '4.12'

        guavaVersion = '27.0.1-jre'
        modelmapperVersion = '1.1.2'

        logbackVersion = ''
        slf4jVersion = ''

        ehcacheVersion = ''
        cglibVersion = ''

        mySQLVersion = '8.0.13'

        hibernateVersion = '5.4.0.Final'
        mybatisVersion = '3.4.6'
        mybatisSpringVersion = '1.3.2'
        pagehelperVersion = '5.1.8'

        commonsLang3Version = '3.8.1'
        commonsCollectionsVersion = '3.2.2'
        commonsIoVersion = '2.6'

        druidVersion = ''
        fastjsonVersion = ''
        rabbitmqVersion = ''

        //
        log4jVersion = ''
        commonsLoggingVersion = ''
        apacheLog4jVersion = ''
        slf4jLog4j12Version = ''
    }

    dependencies {
        /** Spring Boot */
        compile("org.springframework.boot:spring-boot-starter")
        compile("org.springframework.boot:spring-boot-starter-web")
        compile("org.springframework.boot:spring-boot-starter-data-jpa")
        compile("org.springframework.boot:spring-boot-starter-security")

        compile("org.springframework.boot:spring-boot-starter-freemarker")
        compile("org.springframework.boot:spring-boot-starter-thymeleaf")

        /** Kotlin */
        //Java 8 variant of Kotlin standard library
        compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
        //Kotlin reflection library (mandatory as of Spring Framework 5)
        compile("org.jetbrains.kotlin:kotlin-reflect")
        //adds support for serialization/deserialization of Kotlin classes and data classes
        compile("com.fasterxml.jackson.module:jackson-module-kotlin")

        // Google Guava
        compile("com.google.guava:guava:${guavaVersion}")
        // ModelMapper
        compile("org.modelmapper:modelmapper:${modelmapperVersion}")

        // MySQL
        compile("mysql:mysql-connector-java:${mySQLVersion}")

        // Hibernate
        compile("org.hibernate:hibernate-core:${hibernateVersion}")
        //compile("com.github.hibernate-redis:hibernate-redis:${hibernateRedisVersion}")

        // MyBatis
        compile("org.mybatis:mybatis:${mybatisVersion}")
        compile("org.mybatis:mybatis-spring:${mybatisSpringVersion}")
        compile("com.github.pagehelper:pagehelper:${pagehelperVersion}")

        // Commons
        compile("org.apache.commons:commons-lang3:${commonsLang3Version}")
        compile("commons-collections:commons-collections:${commonsCollectionsVersion}")
        compile("commons-io:commons-io:${commonsIoVersion}")

        runtime("org.springframework.boot:spring-boot-devtools")

        testCompile("org.springframework.boot:spring-boot-starter-test") {
            exclude(module: "junit")
            exclude(module: "commons-logging")
        }
        testCompile("junit:junit:${junitVersion}")
        testCompile("org.junit.jupiter:junit-jupiter-api")
        testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
    }
}
