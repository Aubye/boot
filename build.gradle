buildscript {
    ext {
        springBootVersion = '2.1.4.RELEASE'
        springCloudVersion = 'Finchley.RELEASE'
        springCloudAliVersion = '0.2.1.RELEASE'
    }
    repositories {
        mavenLocal()
        maven { url "http://maven.aliyun.com/nexus/content/groups/public" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

group = 'com.spring'
version = '0.0.1-SNAPSHOT'
description = "spring-boot"

configure(allprojects.findAll { it.subprojects.empty }) {
    //Java
    apply plugin: 'java'

    //IDE
    apply plugin: 'idea'
    apply plugin: 'eclipse'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenLocal()
        maven { url "http://maven.aliyun.com/nexus/content/groups/public" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
        jcenter()
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    test {
        exclude '**/*'
    }

    ext {
        guavaVersion = "27.1-jre"

        orikaVersion = "1.5.4"
        modelmapperVersion = "2.3.3"

        fastJsonVersion = "1.2.57"

        commonsIoVersion = "2.6"
        commonsCodecVersion = "1.12"
        commonsLang3Version = "3.9"
        commonsBeanutilsVersion = "1.9.3"
        commonsCollectionsVersion = "3.2.2"
        commonsCollections4Version = "4.3"

        junitVersion = '4.12'
    }

    dependencies {
        //Google Guava
        compile("com.google.guava:guava:${guavaVersion}")

        //Orika
        compile("ma.glasnost.orika:orika-core:${orikaVersion}")
        //ModelMapper
        compile("org.modelmapper:modelmapper:${modelmapperVersion}")

        //FastJSON
        compile("com.alibaba:fastjson:${fastJsonVersion}")

        //Commons
        compile("commons-io:commons-io:${commonsIoVersion}")
        compile("commons-codec:commons-codec:${commonsCodecVersion}")
        compile("org.apache.commons:commons-lang3:${commonsLang3Version}")
        compile("commons-beanutils:commons-beanutils:${commonsBeanutilsVersion}")
        compile("commons-collections:commons-collections:${commonsCollectionsVersion}")
        compile("org.apache.commons:commons-collections4:${commonsCollections4Version}")

        //Junit
        testCompile("junit:junit:${junitVersion}")
    }
}

configure(subprojects.findAll {
    it.subprojects.empty && (it.name.startsWith('common-'))
}) {
    ext {
        rocketMqVersion = "4.4.0"
        kafkaVersion = "2.1.2.RELEASE"
    }

    dependencies {
        //Spring Boot
        compile("org.springframework.boot:spring-boot-starter:${springBootVersion}")
        //Spring AOP
        compile("org.springframework.boot:spring-boot-starter-aop:${springBootVersion}")

        //Spring Data JPA
        compile("org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}")
        //Spring Data JDBC
        compile("org.springframework.boot:spring-boot-starter-data-jdbc:${springBootVersion}")

        //Spring Data Redis
        compile("org.springframework.boot:spring-boot-starter-data-redis:${springBootVersion}")

        //Spring Validation
        compile("org.springframework.boot:spring-boot-starter-validation:${springBootVersion}")

        //Spring AMQP
        compile("org.springframework.boot:spring-boot-starter-amqp:${springBootVersion}")
        //RocketMQ
        compile("org.apache.rocketmq:rocketmq-client:${rocketMqVersion}")
        //Kafka
        compile("org.springframework.cloud:spring-cloud-starter-stream-kafka:${kafkaVersion}")

        //Spring Test
        testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
    }
}

configure(subprojects.findAll {
    it.subprojects.empty && (it.name.startsWith('platform-'))
}) {
    //Spring Boot
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
            mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
            mavenBom("org.springframework.cloud:spring-cloud-alibaba-dependencies:${springCloudAliVersion}")
        }
    }

    ext {
        rocketMqVersion = "4.4.0"
        kafkaVersion = "2.1.2.RELEASE"
    }

    dependencies {
        //Spring Boot
        compile("org.springframework.boot:spring-boot-starter")
        compile("org.springframework.boot:spring-boot-starter-aop")

        compile("org.springframework.boot:spring-boot-starter-data-jpa")
        compile("org.springframework.boot:spring-boot-starter-data-jdbc")

        compile("org.springframework.boot:spring-boot-starter-data-redis")

        compile("org.springframework.boot:spring-boot-starter-validation")

        compile("org.springframework.boot:spring-boot-starter-amqp")
        compile("org.apache.rocketmq:rocketmq-client:${rocketMqVersion}")
        compile("org.springframework.cloud:spring-cloud-starter-stream-kafka:${kafkaVersion}")

        testCompile("org.springframework.boot:spring-boot-starter-test")
    }

}

configure(subprojects.findAll {
    it.subprojects.empty && (it.name.endsWith('-api'))
}) {

    ext {}

    dependencies {
        //Spring Boot
        compile("org.springframework.boot:spring-boot-starter:${springBootVersion}")
        compile("org.springframework.boot:spring-boot-starter-jersey:${springBootVersion}")
        testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
    }

}

configure(subprojects.findAll {
    it.subprojects.empty && it.name.endsWith('-service')
}) {
    //Spring Boot
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
            mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
            mavenBom("org.springframework.cloud:spring-cloud-alibaba-dependencies:${springCloudAliVersion}")
        }
    }

    ext {
        rocketMqVersion = '4.4.0'
    }

    dependencies {
        //Spring Boot
        compile("org.springframework.boot:spring-boot-starter")
        //AOP
        compile("org.springframework.boot:spring-boot-starter-aop")
        //AMQP
        compile("org.springframework.boot:spring-boot-starter-amqp")
        //Dubbo
        //compile("org.springframework.boot:spring-boot-starter-dubbo")
        //Actuator - HealthCheck
        compile("org.springframework.boot:spring-boot-starter-actuator")
        //Security
        compile("org.springframework.boot:spring-boot-starter-security")
        //Data-JPA
        compile("org.springframework.boot:spring-boot-starter-data-jpa")
        //JDBC
        compile("org.springframework.boot:spring-boot-starter-data-jdbc")
        //Redis
        compile("org.springframework.boot:spring-boot-starter-data-redis")
        //JSON
        compile("org.springframework.boot:spring-boot-starter-json")
        //Quartz
        compile("org.springframework.boot:spring-boot-starter-quartz")
        //Annotation Validation
        compile("org.springframework.boot:spring-boot-starter-validation")
        //WebFlux
        compile("org.springframework.boot:spring-boot-starter-webflux")
        //Websocket
        compile("org.springframework.boot:spring-boot-starter-websocket")
        //RESTful
        compile("org.springframework.boot:spring-boot-starter-jersey")
        //Groovy Template
        compile("org.springframework.boot:spring-boot-starter-groovy-templates")

        //Devtools
        runtime("org.springframework.boot:spring-boot-devtools")

        //Logback 默认日志启动器
        //compile("org.springframework.boot:spring-boot-starter-logging")
        //使用Log4j2进行日志记录,替代spring-boot-starter-logging
        //compile("org.springframework.boot:spring-boot-starter-log4j2")
        //compile("org.springframework.boot:spring-boot-starter-reactor-netty")
        //compile("org.springframework.boot:spring-boot-starter-jetty")
        //compile("org.springframework.boot:spring-boot-starter-tomcat")

        //Other
        //compile("org.springframework.boot:spring-boot-starter-mail")
        //compile("org.springframework.boot:spring-boot-starter-batch")
        //compile("org.springframework.boot:spring-boot-starter-cache")
        //compile("org.springframework.boot:spring-boot-starter-web-services")

        //NoSQL
        //compile("org.springframework.boot:spring-boot-starter-data-mongodb")
        //compile("org.springframework.boot:spring-boot-starter-data-solr")

        //OAuth2 JWT
        //compile("org.springframework.boot:spring-boot-starter-oauth2-client")
        //compile("org.springframework.boot:spring-boot-starter-oauth2-resource-server")

        //compile("org.springframework.boot:spring-boot-starter-cloud-connectors")

        //Junit
        testCompile("org.springframework.boot:spring-boot-starter-test")
    }
}


configure(subprojects.findAll {
    it.subprojects.empty && it.name.endsWith('-web')
}) {
    //Spring Boot
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    //Node
    /*apply plugin: "com.moowork.node"*/

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
            mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
            mavenBom("org.springframework.cloud:spring-cloud-alibaba-dependencies:${springCloudAliVersion}")
        }
    }

    ext {}

    dependencies {
        //Spring Boot
        compile("org.springframework.boot:spring-boot-starter")
        compile("org.springframework.boot:spring-boot-starter-web")

        compile("org.springframework.boot:spring-boot-starter-security")
        compile("org.springframework.boot:spring-boot-starter-validation")

        compile("org.springframework.boot:spring-boot-starter-json")

        compile("org.springframework.boot:spring-boot-starter-webflux")
        compile("org.springframework.boot:spring-boot-starter-web-services")
        compile("org.springframework.boot:spring-boot-starter-websocket")

        compile("org.springframework.boot:spring-boot-starter-jersey")
        compile("org.springframework.boot:spring-boot-starter-freemarker")
        compile("org.springframework.boot:spring-boot-starter-thymeleaf")

        compile("org.springframework.boot:spring-boot-starter-actuator")

        testCompile("org.springframework.boot:spring-boot-starter-test")
    }
}
