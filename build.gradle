buildscript {
    ext {
        springBootVersion = '2.1.1.RELEASE'
        /*nodeVersion = '1.2.0'*/
    }
    repositories {
        mavenLocal()
        maven{ url 'http://maven.aliyun.com/nexus/content/groups/public'}
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        /*classpath("com.moowork.gradle:gradle-node-plugin:${nodeVersion}")*/
    }
}

allprojects {
    //Java
    apply plugin: 'java'
    apply plugin: 'war'
    //IDE
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    //Spring Boot
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    //Node
    /*apply plugin: "com.moowork.node"*/

    group = 'com.spring'
    version = '0.0.1-SNAPSHOT'

    description = "spring-boot"

    sourceCompatibility = 11
    targetCompatibility = 11

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    /*node {
        version = '8.12.0'
        npmVersion = '6.5.0'
        download = true
    }*/

    repositories {
        mavenLocal()
        maven{ url 'http://maven.aliyun.com/nexus/content/groups/public'}
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
        jcenter()
    }

    dependencyManagement {
        imports { mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}") }
    }

    test {
        useJUnitPlatform()
    }

    ext {
        junitVersion = '4.12'

        lombokVersion = '1.18.4'

        guavaVersion = '27.0.1-jre'
        modelmapperVersion = '1.1.2'

        logbackVersion = ''
        slf4jVersion = ''

        ehcacheVersion = ''
        cglibVersion = ''

        mySQLVersion = '8.0.13'

        hibernateVersion = '5.4.0.Final'
        mybatisVersion = '3.4.6'
        mybatisSpringVersion = '1.3.2'
        pagehelperVersion = '5.1.8'

        commonsLang3Version = '3.8.1'
        commonsCollectionsVersion = '3.2.2'
        commonsIoVersion = '2.6'

        druidVersion = ''
        fastjsonVersion = ''
        rabbitmqVersion = ''

        //
        log4jVersion = ''
        commonsLoggingVersion = ''
        apacheLog4jVersion = ''
        slf4jLog4j12Version = ''
    }

    dependencies {
        /** Spring Boot */
        compile("org.springframework.boot:spring-boot-starter")
        compile("org.springframework.boot:spring-boot-starter-aop")
        compile("org.springframework.boot:spring-boot-starter-web")
        compile("org.springframework.boot:spring-boot-starter-amqp")
        compile("org.springframework.boot:spring-boot-starter-batch")
        compile("org.springframework.boot:spring-boot-starter-cache")
        compile("org.springframework.boot:spring-boot-starter-data-jpa")
        compile("org.springframework.boot:spring-boot-starter-data-jdbc")
        compile("org.springframework.boot:spring-boot-starter-data-redis")
        compile("org.springframework.boot:spring-boot-starter-data-mongodb")
        compile("org.springframework.boot:spring-boot-starter-data-solr")

        compile("org.springframework.boot:spring-boot-starter-security")
        compile("org.springframework.boot:spring-boot-starter-oauth2-client")
        compile("org.springframework.boot:spring-boot-starter-oauth2-resource-server")

        compile("org.springframework.boot:spring-boot-starter-validation")
        compile("org.springframework.boot:spring-boot-starter-quartz")
        compile("org.springframework.boot:spring-boot-starter-json")
        compile("org.springframework.boot:spring-boot-starter-mail")

        compile("org.springframework.boot:spring-boot-starter-webflux")
        compile("org.springframework.boot:spring-boot-starter-web-services")
        compile("org.springframework.boot:spring-boot-starter-websocket")

        //Logback 默认日志启动器
        //compile("org.springframework.boot:spring-boot-starter-logging")
        //使用Log4j2进行日志记录,替代spring-boot-starter-logging
        //compile("org.springframework.boot:spring-boot-starter-log4j2")
        //compile("org.springframework.boot:spring-boot-starter-reactor-netty")
        //compile("org.springframework.boot:spring-boot-starter-jetty")
        //compile("org.springframework.boot:spring-boot-starter-tomcat")

        //compile("org.springframework.boot:spring-boot-starter-groovy-templates")
        compile("org.springframework.boot:spring-boot-starter-jersey")
        compile("org.springframework.boot:spring-boot-starter-freemarker")
        compile("org.springframework.boot:spring-boot-starter-thymeleaf")

        compile("org.springframework.boot:spring-boot-starter-actuator")

        //compile("org.springframework.boot:spring-boot-starter-cloud-connectors")

        compile("org.projectlombok:lombok:${lombokVersion}")

        // Google Guava
        compile("com.google.guava:guava:${guavaVersion}")
        // ModelMapper
        compile("org.modelmapper:modelmapper:${modelmapperVersion}")

        // MySQL
        compile("mysql:mysql-connector-java:${mySQLVersion}")

        // Hibernate
        compile("org.hibernate:hibernate-core:${hibernateVersion}")
        //compile("com.github.hibernate-redis:hibernate-redis:${hibernateRedisVersion}")

        // MyBatis
        compile("org.mybatis:mybatis:${mybatisVersion}")
        compile("org.mybatis:mybatis-spring:${mybatisSpringVersion}")
        compile("com.github.pagehelper:pagehelper:${pagehelperVersion}")

        // Commons
        compile("org.apache.commons:commons-lang3:${commonsLang3Version}")
        compile("commons-collections:commons-collections:${commonsCollectionsVersion}")
        compile("commons-io:commons-io:${commonsIoVersion}")

        runtime("org.springframework.boot:spring-boot-devtools")

        testCompile("org.springframework.boot:spring-boot-starter-test") {
            exclude(module: "junit")
            exclude(module: "commons-logging")
        }
        testCompile("junit:junit:${junitVersion}")
        testCompile("org.junit.jupiter:junit-jupiter-api")
        testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
    }

    /*task npmBuild(type: NpmTask, dependsOn: 'npmInstall') {
        group = 'node'
        args = ['run', 'build']
    }

    task npmDev(type: NpmTask, dependsOn: npmInstall) {
        group = 'node'
        args = ['run', 'dev']
    }

    task webpack(type: NodeTask, dependsOn: 'npmInstall') {
        def osName = System.getProperty("os.name").toLowerCase();
        if (osName.contains("windows")) {
            script = project.file('node_modules/webpack/bin/webpack.js')
        } else {
            script = project.file('node_modules/.bin/webpack')
        }
    }

    processResources.dependsOn 'webpack'
    clean.delete << file('node_modules')*/
}
